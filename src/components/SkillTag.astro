---
// src/components/SkillTag.astro
// Reusable component for displaying a skill tag with an optional icon.
import type { Skill } from '../data/skillCategories';

// Define the expected properties (props) for this component
export interface Props extends Partial<Skill> {
    name: string;
    icon?: string; // Icon class (e.g., 'fab fa-java') is optional
    bgColor?: string;
    textColor?: string;
    level?: 'beginner' | 'intermediate' | 'advanced' | 'expert';
}

// Destructure props with default values if needed (Tailwind classes handle defaults well)
const {
    name,
    icon,
    bgColor = "bg-gray-100",
    textColor = "text-gray-800",
    level,
} = Astro.props;

// Combine Tailwind classes, ensuring defaults are applied if specific ones aren't passed
const tagClasses = `${bgColor} ${textColor} text-sm font-medium px-4 py-2 rounded-full shadow-sm flex items-center`;
---

<span 
    class:list={[tagClasses]} 
    role="listitem" 
    data-skill={name}
    data-level={level}
    itemscope 
    itemtype="https://schema.org/DefinedTerm"
>
    {/* Use class:list directive for cleaner class combination */}
    {icon && <i class:list={[icon, "mr-2"]} aria-hidden="true" />}
    {/* Render icon only if provided */}
    <span itemprop="name">{name}</span>
    {level && (
        <span class="sr-only">, {level} level</span>
    )}
</span>
