---
// src/pages/blog.astro
import MainLayout from "../../layouts/MainLayout.astro";
---

<MainLayout title="Whitelisting with Rust" isBlogPost={true}>
  <div class="max-w-3xl mx-auto px-4 sm:px-8 md:px-16 py-10 mt-8 mb-16">
    <h1
      class="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-white my-6 text-center"
    >
      Whitelisting with Rust: Diving Deep into Language Detection
    </h1>

    <nav class="mb-10 flex justify-center">
      <div
        class="w-full max-w-md bg-indigo-50 dark:bg-gray-800 border border-indigo-200 dark:border-gray-700 rounded-xl shadow-md p-5"
      >
        <h2
          class="text-lg font-semibold text-indigo-900 dark:text-indigo-200 mb-3 text-center tracking-wide"
        >
          Table of Contents
        </h2>
        <ul
          class="list-decimal list-inside space-y-2 text-indigo-700 dark:text-indigo-300 text-base"
        >
          <li>
            <a
              href="#problem"
              class="hover:text-indigo-900 dark:hover:text-white transition-colors duration-150 font-medium"
              >The Problem: Whitelisting by Language</a
            >
          </li>
          <li>
            <a
              href="#research"
              class="hover:text-indigo-900 dark:hover:text-white transition-colors duration-150 font-medium"
              >Research and Challenges</a
            >
          </li>
          <li>
            <a
              href="#options"
              class="hover:text-indigo-900 dark:hover:text-white transition-colors duration-150 font-medium"
              >Libraries Explored</a
            >
          </li>
          <li>
            <a
              href="#lessons"
              class="hover:text-indigo-900 dark:hover:text-white transition-colors duration-150 font-medium"
              >Lessons Learned</a
            >
          </li>
          <li>
            <a
              href="#looking-ahead"
              class="hover:text-indigo-900 dark:hover:text-white transition-colors duration-150 font-medium"
              >Looking Ahead</a
            >
          </li>
        </ul>
      </div>
    </nav>

    <p class="text-lg text-gray-700 dark:text-gray-300 mb-8">
      Building a feature to filter or whitelist content by language might sound
      simple at first. But when I set out to do this in Rust, I quickly realized
      the language detection ecosystem wasn't as straightforward as I expected.
      This blog post reflects the path I took researching language detection
      crates in Rust, comparing trade-offs, and choosing the right tool for the
      job.
    </p>

    <h2
      id="problem"
      class="text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-4 mt-10 scroll-mt-24"
    >
      The Problem: Whitelisting by Language
    </h2>
    <p class="text-gray-700 dark:text-gray-300 mb-6">
      I needed to ensure that only content written in specific languages would
      be processed in a Rust-based service. For example, English, Spanish, and
      German should pass, while others should be ignored or flagged. This
      required a reliable and lightweight language detection mechanism that
      could integrate smoothly into an async backend.
    </p>

    <h2
      id="research"
      class="text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-4 mt-10 scroll-mt-24"
    >
      Research and Challenges
    </h2>
    <p class="text-gray-700 dark:text-gray-300 mb-6">
      Language detection is a mature field in many ecosystems, but in Rust, it's
      still growing. I discovered that most options fall into two categories:
      bindings to external libraries like CLD2/CLD3, or native implementations
      written in pure Rust. The decision was not just about accuracy.
      Performance, ease of integration, and maintenance also mattered.
    </p>

    <h2
      id="options"
      class="text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-4 mt-10 scroll-mt-24"
    >
      Libraries Explored
    </h2>
    <ul
      class="list-disc list-inside text-gray-700 dark:text-gray-300 mb-6 space-y-2"
    >
      <li>
        <strong>rust-cld2:</strong> Fast and accurate, but uses FFI to Google's Compact
        Language Detector. This added complexity and required compiling C++ code.
      </li>
      <li>
        <strong>whatlang:</strong> Pure Rust, no dependencies, and fast. However,
        accuracy dipped with very short texts or ambiguous phrases.
      </li>
      <li>
        <strong>lingua-rs:</strong> A port of a JVM-based language detector. It is
        accurate and configurable but has a relatively large memory footprint for
        embedded or edge cases.
      </li>
    </ul>

    <h2
      id="lessons"
      class="text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-4 mt-10 scroll-mt-24"
    >
      Lessons Learned
    </h2>
    <ul
      class="list-disc list-inside text-gray-700 dark:text-gray-300 mb-6 space-y-2"
    >
      <li>
        Not all Rust crates are created equal. Evaluate maintenance, community
        support, and extensibility, not just benchmarks.
      </li>
      <li>
        When performance matters, pure Rust implementations shine, but sometimes
        you trade off precision for portability.
      </li>
      <li>
        Writing small test harnesses to simulate real-world input is worth the
        time. Lab results often don't reflect production needs.
      </li>
    </ul>

    <h2
      id="looking-ahead"
      class="text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-4 mt-10 scroll-mt-24"
    >
      Looking Ahead
    </h2>
    <p class="text-gray-700 dark:text-gray-300 mb-6">
      I'm keeping an eye on improvements in model-based detection and WASM
      compatibility for edge deployments. If you're facing similar decisions, I
      recommend testing with your actual data before committing.
    </p>

    <p class="text-gray-700 dark:text-gray-300">
      Choosing the right language detection crate was more than just picking the
      most stars on GitHub. It was about understanding the problem, researching
      deeply, and documenting the trade-offs. If you're working with
      multilingual data in Rust, I hope this helps you avoid some rabbit holes I
      fell into.
    </p>

    <div class="flex justify-between gap-4 mt-16">
      <a
        href="/blog/mastering-paddle"
        class="text-indigo-700 dark:text-indigo-300 hover:underline font-medium flex items-center"
      >
        <svg class="mr-2 w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" /></svg>
        Previous: Mastering Paddle
      </a>
      <a
        href="/blog/testing-slack-bots"
        class="text-indigo-700 dark:text-indigo-300 hover:underline font-medium flex items-center"
      >
        Next: Testing Slack Bots
        <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" /></svg>
      </a>
    </div>
  </div>
</MainLayout>
